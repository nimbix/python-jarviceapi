# coding: utf-8

"""
    Jarvice API

    The JARVICE API allows full control on running jobs as well as managing applications via PushToComputeâ„¢.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@nimbix.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from jarviceapi_client.models.app_def_cmd import AppDefCmd
from jarviceapi_client.models.app_def_ident import AppDefIdent
from jarviceapi_client.models.app_def_image import AppDefImage
from jarviceapi_client.models.variable import Variable

class AppDef(BaseModel):
    """
    AppDef
    """
    appdefversion: Optional[StrictInt] = None
    author: Optional[StrictStr] = None
    certified: Optional[StrictBool] = None
    classifications: Optional[conlist(StrictStr)] = None
    commands: Optional[Dict[str, AppDefCmd]] = None
    description: Optional[StrictStr] = None
    enablehpc: Optional[StrictBool] = None
    id: Optional[StrictStr] = None
    identity: Optional[AppDefIdent] = None
    image: Optional[AppDefImage] = None
    licensed: Optional[StrictBool] = None
    machines: Optional[conlist(StrictStr)] = None
    nae: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    owner: Optional[StrictStr] = None
    price: Optional[StrictStr] = Field(None, description="These are not in the JSON, but copied in XXX: Should this be removed?")
    public: Optional[StrictBool] = None
    scale_max: Optional[StrictInt] = None
    team: Optional[StrictBool] = None
    variables: Optional[Dict[str, Variable]] = None
    vault_types: Optional[conlist(StrictStr)] = Field(None, alias="vault-types")
    walltime: Optional[StrictStr] = None
    __properties = ["appdefversion", "author", "certified", "classifications", "commands", "description", "enablehpc", "id", "identity", "image", "licensed", "machines", "nae", "name", "owner", "price", "public", "scale_max", "team", "variables", "vault-types", "walltime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AppDef:
        """Create an instance of AppDef from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in commands (dict)
        _field_dict = {}
        if self.commands:
            for _key in self.commands:
                if self.commands[_key]:
                    _field_dict[_key] = self.commands[_key].to_dict()
            _dict['commands'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of identity
        if self.identity:
            _dict['identity'] = self.identity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in variables (dict)
        _field_dict = {}
        if self.variables:
            for _key in self.variables:
                if self.variables[_key]:
                    _field_dict[_key] = self.variables[_key].to_dict()
            _dict['variables'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AppDef:
        """Create an instance of AppDef from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AppDef.parse_obj(obj)

        _obj = AppDef.parse_obj({
            "appdefversion": obj.get("appdefversion"),
            "author": obj.get("author"),
            "certified": obj.get("certified"),
            "classifications": obj.get("classifications"),
            "commands": dict(
                (_k, AppDefCmd.from_dict(_v))
                for _k, _v in obj.get("commands").items()
            )
            if obj.get("commands") is not None
            else None,
            "description": obj.get("description"),
            "enablehpc": obj.get("enablehpc"),
            "id": obj.get("id"),
            "identity": AppDefIdent.from_dict(obj.get("identity")) if obj.get("identity") is not None else None,
            "image": AppDefImage.from_dict(obj.get("image")) if obj.get("image") is not None else None,
            "licensed": obj.get("licensed"),
            "machines": obj.get("machines"),
            "nae": obj.get("nae"),
            "name": obj.get("name"),
            "owner": obj.get("owner"),
            "price": obj.get("price"),
            "public": obj.get("public"),
            "scale_max": obj.get("scale_max"),
            "team": obj.get("team"),
            "variables": dict(
                (_k, Variable.from_dict(_v))
                for _k, _v in obj.get("variables").items()
            )
            if obj.get("variables") is not None
            else None,
            "vault_types": obj.get("vault-types"),
            "walltime": obj.get("walltime")
        })
        return _obj

