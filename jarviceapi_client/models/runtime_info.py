# coding: utf-8

"""
    Jarvice API

    The JARVICE API allows full control on running jobs as well as managing applications via PushToComputeâ„¢.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@nimbix.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, StrictStr

class RuntimeInfo(BaseModel):
    """
    RuntimeInfo
    """
    about: Optional[StrictStr] = None
    actions: Optional[Dict[str, Dict[str, StrictStr]]] = None
    address: Optional[StrictStr] = None
    help: Optional[StrictStr] = None
    password: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    __properties = ["about", "actions", "address", "help", "password", "url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RuntimeInfo:
        """Create an instance of RuntimeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RuntimeInfo:
        """Create an instance of RuntimeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RuntimeInfo.parse_obj(obj)

        _obj = RuntimeInfo.parse_obj({
            "about": obj.get("about"),
            "actions": obj.get("actions"),
            "address": obj.get("address"),
            "help": obj.get("help"),
            "password": obj.get("password"),
            "url": obj.get("url")
        })
        return _obj

