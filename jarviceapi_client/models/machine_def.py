# coding: utf-8

"""
    Jarvice API

    The JARVICE API allows full control on running jobs as well as managing applications via PushToComputeâ„¢.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@nimbix.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, conlist

class MachineDef(BaseModel):
    """
    MachineDef
    """
    mc_arch: Optional[StrictStr] = None
    mc_cores: Optional[StrictInt] = None
    mc_description: Optional[StrictStr] = None
    mc_devices: Optional[StrictStr] = None
    mc_gpus: Optional[StrictInt] = None
    mc_lesser: Optional[StrictInt] = None
    mc_max_concurrent: Optional[StrictInt] = None
    mc_name: Optional[StrictStr] = None
    mc_price: Optional[Union[StrictFloat, StrictInt]] = None
    mc_priority: Optional[StrictInt] = None
    mc_privs: Optional[conlist(StrictStr)] = None
    mc_properties: Optional[StrictStr] = None
    mc_ram: Optional[StrictInt] = None
    mc_scale_max: Optional[StrictInt] = None
    mc_scale_min: Optional[StrictInt] = None
    mc_scale_select: Optional[StrictStr] = None
    mc_sched_id: Optional[StrictInt] = None
    mc_scratch: Optional[StrictInt] = None
    mc_slave_cores: Optional[StrictInt] = None
    mc_slave_gpus: Optional[StrictInt] = None
    mc_slave_properties: Optional[StrictStr] = None
    mc_slave_ram: Optional[StrictInt] = None
    mc_slots: Optional[StrictInt] = None
    mc_swap: Optional[StrictInt] = None
    __properties = ["mc_arch", "mc_cores", "mc_description", "mc_devices", "mc_gpus", "mc_lesser", "mc_max_concurrent", "mc_name", "mc_price", "mc_priority", "mc_privs", "mc_properties", "mc_ram", "mc_scale_max", "mc_scale_min", "mc_scale_select", "mc_sched_id", "mc_scratch", "mc_slave_cores", "mc_slave_gpus", "mc_slave_properties", "mc_slave_ram", "mc_slots", "mc_swap"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MachineDef:
        """Create an instance of MachineDef from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MachineDef:
        """Create an instance of MachineDef from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MachineDef.parse_obj(obj)

        _obj = MachineDef.parse_obj({
            "mc_arch": obj.get("mc_arch"),
            "mc_cores": obj.get("mc_cores"),
            "mc_description": obj.get("mc_description"),
            "mc_devices": obj.get("mc_devices"),
            "mc_gpus": obj.get("mc_gpus"),
            "mc_lesser": obj.get("mc_lesser"),
            "mc_max_concurrent": obj.get("mc_max_concurrent"),
            "mc_name": obj.get("mc_name"),
            "mc_price": obj.get("mc_price"),
            "mc_priority": obj.get("mc_priority"),
            "mc_privs": obj.get("mc_privs"),
            "mc_properties": obj.get("mc_properties"),
            "mc_ram": obj.get("mc_ram"),
            "mc_scale_max": obj.get("mc_scale_max"),
            "mc_scale_min": obj.get("mc_scale_min"),
            "mc_scale_select": obj.get("mc_scale_select"),
            "mc_sched_id": obj.get("mc_sched_id"),
            "mc_scratch": obj.get("mc_scratch"),
            "mc_slave_cores": obj.get("mc_slave_cores"),
            "mc_slave_gpus": obj.get("mc_slave_gpus"),
            "mc_slave_properties": obj.get("mc_slave_properties"),
            "mc_slave_ram": obj.get("mc_slave_ram"),
            "mc_slots": obj.get("mc_slots"),
            "mc_swap": obj.get("mc_swap")
        })
        return _obj

