# coding: utf-8

"""
    Jarvice API

    The JARVICE API allows full control on running jobs as well as managing applications via PushToComputeâ„¢.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@nimbix.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from jarviceapi_client.models.rt_metrics_itemized import RTMetricsItemized
from jarviceapi_client.models.rt_metrics_summary import RTMetricsSummary

class RuntimeMetrics(BaseModel):
    """
    RuntimeMetrics
    """
    itemized: Optional[RTMetricsItemized] = None
    summary: Optional[RTMetricsSummary] = None
    __properties = ["itemized", "summary"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RuntimeMetrics:
        """Create an instance of RuntimeMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of itemized
        if self.itemized:
            _dict['itemized'] = self.itemized.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RuntimeMetrics:
        """Create an instance of RuntimeMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RuntimeMetrics.parse_obj(obj)

        _obj = RuntimeMetrics.parse_obj({
            "itemized": RTMetricsItemized.from_dict(obj.get("itemized")) if obj.get("itemized") is not None else None,
            "summary": RTMetricsSummary.from_dict(obj.get("summary")) if obj.get("summary") is not None else None
        })
        return _obj

