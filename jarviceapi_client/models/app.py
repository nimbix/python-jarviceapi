# coding: utf-8

"""
    Jarvice API

    The JARVICE API allows full control on running jobs as well as managing applications via PushToComputeâ„¢.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@nimbix.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from jarviceapi_client.models.app_def import AppDef

class App(BaseModel):
    """
    App
    """
    price: Optional[Union[StrictFloat, StrictInt]] = None
    data: Optional[AppDef] = None
    owner: Optional[Union[StrictFloat, StrictInt]] = None
    arch: Optional[StrictInt] = None
    id: Optional[StrictStr] = None
    privs: Optional[conlist(StrictStr)] = None
    src: Optional[StrictStr] = None
    updated: Optional[StrictInt] = None
    checkedout: Optional[StrictBool] = None
    certified: Optional[StrictBool] = None
    walltime: Optional[StrictStr] = None
    repo: Optional[StrictStr] = None
    __properties = ["price", "data", "owner", "arch", "id", "privs", "src", "updated", "checkedout", "certified", "walltime", "repo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> App:
        """Create an instance of App from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> App:
        """Create an instance of App from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return App.parse_obj(obj)

        _obj = App.parse_obj({
            "price": obj.get("price"),
            "data": AppDef.from_dict(obj.get("data")) if obj.get("data") is not None else None,
            "owner": obj.get("owner"),
            "arch": obj.get("arch"),
            "id": obj.get("id"),
            "privs": obj.get("privs"),
            "src": obj.get("src"),
            "updated": obj.get("updated"),
            "checkedout": obj.get("checkedout"),
            "certified": obj.get("certified"),
            "walltime": obj.get("walltime"),
            "repo": obj.get("repo")
        })
        return _obj

