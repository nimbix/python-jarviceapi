# coding: utf-8

"""
    Jarvice API

    The JARVICE API allows full control on running jobs as well as managing applications via PushToComputeâ„¢.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@nimbix.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from jarviceapi_client.models.app_def_ident import AppDefIdent
from jarviceapi_client.models.job_obj_vault import JobObjVault
from jarviceapi_client.models.job_upload import JobUpload

class JobObj(BaseModel):
    """
    JobObj
    """
    app: Optional[StrictStr] = None
    app_owner: Optional[StrictStr] = None
    appdefversion: Optional[StrictInt] = None
    arch: Optional[StrictStr] = None
    cmdargs: Optional[conlist(StrictStr)] = None
    cmdargtypes: Optional[conlist(StrictStr)] = None
    cmdscript: Optional[StrictStr] = None
    command_line: Optional[StrictStr] = None
    command_name: Optional[StrictStr] = None
    cores: Optional[StrictInt] = None
    ctrsecret: Optional[StrictStr] = None
    desktop: Optional[StrictBool] = None
    devices: Optional[conlist(StrictStr)] = None
    geometry: Optional[StrictStr] = None
    gpus: Optional[StrictInt] = None
    hpc_envs: Optional[Dict[str, StrictStr]] = None
    identity: Optional[AppDefIdent] = None
    interactive: Optional[StrictBool] = None
    ipaddr: Optional[StrictStr] = None
    job_label: Optional[StrictStr] = None
    job_project: Optional[StrictStr] = None
    jobtoken: Optional[StrictStr] = None
    licenses: Optional[StrictStr] = None
    machine: Optional[StrictStr] = None
    memlimit: Optional[StrictInt] = None
    mpirun: Optional[StrictBool] = None
    nae: Optional[StrictStr] = None
    noconnect: Optional[StrictBool] = None
    nodes: Optional[StrictInt] = None
    nopasssubt: Optional[StrictBool] = Field(None, description="subt is not a typo")
    ports: Optional[conlist(StrictStr)] = None
    privileged: Optional[StrictBool] = None
    properties: Optional[conlist(StrictStr)] = None
    publicip: Optional[StrictBool] = None
    ram: Optional[StrictInt] = None
    repo: Optional[StrictStr] = None
    scratch: Optional[StrictInt] = None
    slave_cores: Optional[StrictInt] = None
    slave_gpus: Optional[StrictInt] = None
    slave_properties: Optional[conlist(StrictStr)] = None
    slave_ram: Optional[StrictInt] = None
    slave_scratch: Optional[StrictInt] = None
    slots: Optional[StrictInt] = None
    sshpriv: Optional[StrictStr] = None
    sshpub: Optional[StrictStr] = None
    upload: Optional[JobUpload] = None
    url: Optional[StrictStr] = None
    user: Optional[StrictStr] = None
    variables: Optional[Dict[str, StrictStr]] = None
    variabletypes: Optional[Dict[str, StrictStr]] = None
    vault: Optional[JobObjVault] = None
    verboseinit: Optional[StrictBool] = None
    vmemlimit: Optional[StrictInt] = None
    walltime: Optional[StrictStr] = None
    webshell: Optional[StrictBool] = None
    __properties = ["app", "app_owner", "appdefversion", "arch", "cmdargs", "cmdargtypes", "cmdscript", "command_line", "command_name", "cores", "ctrsecret", "desktop", "devices", "geometry", "gpus", "hpc_envs", "identity", "interactive", "ipaddr", "job_label", "job_project", "jobtoken", "licenses", "machine", "memlimit", "mpirun", "nae", "noconnect", "nodes", "nopasssubt", "ports", "privileged", "properties", "publicip", "ram", "repo", "scratch", "slave_cores", "slave_gpus", "slave_properties", "slave_ram", "slave_scratch", "slots", "sshpriv", "sshpub", "upload", "url", "user", "variables", "variabletypes", "vault", "verboseinit", "vmemlimit", "walltime", "webshell"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobObj:
        """Create an instance of JobObj from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of identity
        if self.identity:
            _dict['identity'] = self.identity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upload
        if self.upload:
            _dict['upload'] = self.upload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vault
        if self.vault:
            _dict['vault'] = self.vault.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobObj:
        """Create an instance of JobObj from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobObj.parse_obj(obj)

        _obj = JobObj.parse_obj({
            "app": obj.get("app"),
            "app_owner": obj.get("app_owner"),
            "appdefversion": obj.get("appdefversion"),
            "arch": obj.get("arch"),
            "cmdargs": obj.get("cmdargs"),
            "cmdargtypes": obj.get("cmdargtypes"),
            "cmdscript": obj.get("cmdscript"),
            "command_line": obj.get("command_line"),
            "command_name": obj.get("command_name"),
            "cores": obj.get("cores"),
            "ctrsecret": obj.get("ctrsecret"),
            "desktop": obj.get("desktop"),
            "devices": obj.get("devices"),
            "geometry": obj.get("geometry"),
            "gpus": obj.get("gpus"),
            "hpc_envs": obj.get("hpc_envs"),
            "identity": AppDefIdent.from_dict(obj.get("identity")) if obj.get("identity") is not None else None,
            "interactive": obj.get("interactive"),
            "ipaddr": obj.get("ipaddr"),
            "job_label": obj.get("job_label"),
            "job_project": obj.get("job_project"),
            "jobtoken": obj.get("jobtoken"),
            "licenses": obj.get("licenses"),
            "machine": obj.get("machine"),
            "memlimit": obj.get("memlimit"),
            "mpirun": obj.get("mpirun"),
            "nae": obj.get("nae"),
            "noconnect": obj.get("noconnect"),
            "nodes": obj.get("nodes"),
            "nopasssubt": obj.get("nopasssubt"),
            "ports": obj.get("ports"),
            "privileged": obj.get("privileged"),
            "properties": obj.get("properties"),
            "publicip": obj.get("publicip"),
            "ram": obj.get("ram"),
            "repo": obj.get("repo"),
            "scratch": obj.get("scratch"),
            "slave_cores": obj.get("slave_cores"),
            "slave_gpus": obj.get("slave_gpus"),
            "slave_properties": obj.get("slave_properties"),
            "slave_ram": obj.get("slave_ram"),
            "slave_scratch": obj.get("slave_scratch"),
            "slots": obj.get("slots"),
            "sshpriv": obj.get("sshpriv"),
            "sshpub": obj.get("sshpub"),
            "upload": JobUpload.from_dict(obj.get("upload")) if obj.get("upload") is not None else None,
            "url": obj.get("url"),
            "user": obj.get("user"),
            "variables": obj.get("variables"),
            "variabletypes": obj.get("variabletypes"),
            "vault": JobObjVault.from_dict(obj.get("vault")) if obj.get("vault") is not None else None,
            "verboseinit": obj.get("verboseinit"),
            "vmemlimit": obj.get("vmemlimit"),
            "walltime": obj.get("walltime"),
            "webshell": obj.get("webshell")
        })
        return _obj

