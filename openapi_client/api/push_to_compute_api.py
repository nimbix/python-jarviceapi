# coding: utf-8

"""
    Jarvice API

    The JARVICE API allows full control on running jobs as well as managing applications via PushToComputeâ„¢.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@nimbix.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr

from typing import Any, Dict, Optional

from openapi_client.models.app_def import AppDef

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PushToComputeApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def build_get(self, apikey : Annotated[StrictStr, Field(..., description="API key for user to authenticate ")], username : Annotated[StrictStr, Field(..., description="Name of user to authenticate")], target : Annotated[StrictStr, Field(..., description="Target application ID to build an image for (must exist)")], pull : Annotated[Optional[StrictBool], Field(description="On successful build, pull Docker repository into a JARVICE application image")] = None, abort : Annotated[Optional[StrictBool], Field(description="Abort a running image build ")] = None, **kwargs) -> object:  # noqa: E501
        """Builds a JARVICE application image for a Docker repository. The JARVICE application ID must already exist.  # noqa: E501

        Builds a JARVICE application image for a Docker repository. The JARVICE application ID must already exist. Additional Notes : 1. You will receive a notification once the build starts and completes, either with or without error, per your account's notification preferences 2. If abort is specified, any running build is aborted immediately; if not, a build is scheduled; note that scheduling a build with one already running results in failure 3. abort does not automatically schedule a new build - it merely changes the meaning of this endpoint from schedule to abort build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.build_get(apikey, username, target, pull, abort, async_req=True)
        >>> result = thread.get()

        :param apikey: API key for user to authenticate  (required)
        :type apikey: str
        :param username: Name of user to authenticate (required)
        :type username: str
        :param target: Target application ID to build an image for (must exist) (required)
        :type target: str
        :param pull: On successful build, pull Docker repository into a JARVICE application image
        :type pull: bool
        :param abort: Abort a running image build 
        :type abort: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the build_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.build_get_with_http_info(apikey, username, target, pull, abort, **kwargs)  # noqa: E501

    @validate_arguments
    def build_get_with_http_info(self, apikey : Annotated[StrictStr, Field(..., description="API key for user to authenticate ")], username : Annotated[StrictStr, Field(..., description="Name of user to authenticate")], target : Annotated[StrictStr, Field(..., description="Target application ID to build an image for (must exist)")], pull : Annotated[Optional[StrictBool], Field(description="On successful build, pull Docker repository into a JARVICE application image")] = None, abort : Annotated[Optional[StrictBool], Field(description="Abort a running image build ")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Builds a JARVICE application image for a Docker repository. The JARVICE application ID must already exist.  # noqa: E501

        Builds a JARVICE application image for a Docker repository. The JARVICE application ID must already exist. Additional Notes : 1. You will receive a notification once the build starts and completes, either with or without error, per your account's notification preferences 2. If abort is specified, any running build is aborted immediately; if not, a build is scheduled; note that scheduling a build with one already running results in failure 3. abort does not automatically schedule a new build - it merely changes the meaning of this endpoint from schedule to abort build  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.build_get_with_http_info(apikey, username, target, pull, abort, async_req=True)
        >>> result = thread.get()

        :param apikey: API key for user to authenticate  (required)
        :type apikey: str
        :param username: Name of user to authenticate (required)
        :type username: str
        :param target: Target application ID to build an image for (must exist) (required)
        :type target: str
        :param pull: On successful build, pull Docker repository into a JARVICE application image
        :type pull: bool
        :param abort: Abort a running image build 
        :type abort: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'apikey',
            'username',
            'target',
            'pull',
            'abort'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method build_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('apikey') is not None:  # noqa: E501
            _query_params.append(('apikey', _params['apikey']))

        if _params.get('username') is not None:  # noqa: E501
            _query_params.append(('username', _params['username']))

        if _params.get('target') is not None:  # noqa: E501
            _query_params.append(('target', _params['target']))

        if _params.get('pull') is not None:  # noqa: E501
            _query_params.append(('pull', _params['pull']))

        if _params.get('abort') is not None:  # noqa: E501
            _query_params.append(('abort', _params['abort']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '400': "str",
            '401': None,
        }

        return self.api_client.call_api(
            '/jarvice/build', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def history_get(self, apikey : Annotated[StrictStr, Field(..., description="API key for user to authenticate ")], username : Annotated[StrictStr, Field(..., description="Name of user to authenticate")], target : Annotated[StrictStr, Field(..., description="Target image name to get history for (usually same as the application ID)")], limit : Annotated[Optional[StrictInt], Field(description="The number of entries to limit the output to")] = None, reltime : Annotated[Optional[StrictBool], Field(description="True : Use relative timestamps - False : Use absolute timestamps")] = None, **kwargs) -> str:  # noqa: E501
        """Retrieve build/pull history for a JARVICE application image.  # noqa: E501

        Retrieve build/pull history for a JARVICE application image. On success, the requested reverse chronological history (most recent first) in text/plain format (with single \\n for line breaks), up to and including the limit requested. Blank output indicates either the target does not exist, or has no associated build/pull history (yet).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.history_get(apikey, username, target, limit, reltime, async_req=True)
        >>> result = thread.get()

        :param apikey: API key for user to authenticate  (required)
        :type apikey: str
        :param username: Name of user to authenticate (required)
        :type username: str
        :param target: Target image name to get history for (usually same as the application ID) (required)
        :type target: str
        :param limit: The number of entries to limit the output to
        :type limit: int
        :param reltime: True : Use relative timestamps - False : Use absolute timestamps
        :type reltime: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the history_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.history_get_with_http_info(apikey, username, target, limit, reltime, **kwargs)  # noqa: E501

    @validate_arguments
    def history_get_with_http_info(self, apikey : Annotated[StrictStr, Field(..., description="API key for user to authenticate ")], username : Annotated[StrictStr, Field(..., description="Name of user to authenticate")], target : Annotated[StrictStr, Field(..., description="Target image name to get history for (usually same as the application ID)")], limit : Annotated[Optional[StrictInt], Field(description="The number of entries to limit the output to")] = None, reltime : Annotated[Optional[StrictBool], Field(description="True : Use relative timestamps - False : Use absolute timestamps")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve build/pull history for a JARVICE application image.  # noqa: E501

        Retrieve build/pull history for a JARVICE application image. On success, the requested reverse chronological history (most recent first) in text/plain format (with single \\n for line breaks), up to and including the limit requested. Blank output indicates either the target does not exist, or has no associated build/pull history (yet).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.history_get_with_http_info(apikey, username, target, limit, reltime, async_req=True)
        >>> result = thread.get()

        :param apikey: API key for user to authenticate  (required)
        :type apikey: str
        :param username: Name of user to authenticate (required)
        :type username: str
        :param target: Target image name to get history for (usually same as the application ID) (required)
        :type target: str
        :param limit: The number of entries to limit the output to
        :type limit: int
        :param reltime: True : Use relative timestamps - False : Use absolute timestamps
        :type reltime: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'apikey',
            'username',
            'target',
            'limit',
            'reltime'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method history_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('apikey') is not None:  # noqa: E501
            _query_params.append(('apikey', _params['apikey']))

        if _params.get('username') is not None:  # noqa: E501
            _query_params.append(('username', _params['username']))

        if _params.get('target') is not None:  # noqa: E501
            _query_params.append(('target', _params['target']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('reltime') is not None:  # noqa: E501
            _query_params.append(('reltime', _params['reltime']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': "str",
            '401': None,
        }

        return self.api_client.call_api(
            '/jarvice/history', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def pull_get(self, apikey : Annotated[StrictStr, Field(..., description="API key for user to authenticate ")], username : Annotated[StrictStr, Field(..., description="Name of user to authenticate")], repo : Annotated[StrictStr, Field(..., description="Docker repository to pull from")], target : Annotated[StrictStr, Field(..., description="Target application ID to build an image for (must exist)")], **kwargs) -> object:  # noqa: E501
        """Pulls a Docker repository into a JARVICE application image. The JARVICE application image must already exist.  # noqa: E501

        Pulls a Docker repository into a JARVICE application image. The JARVICE application image must already exist. Additional Notes : 1. You will receive a notification once the pull starts and completes, either with or without error, per your account's notification preferences 2. repo uses the same syntax as the docker pull does 3. If pulling a private repository, you must log into the Docker registry in the JARVICE portal from the PushToComputeâ„¢ page first  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pull_get(apikey, username, repo, target, async_req=True)
        >>> result = thread.get()

        :param apikey: API key for user to authenticate  (required)
        :type apikey: str
        :param username: Name of user to authenticate (required)
        :type username: str
        :param repo: Docker repository to pull from (required)
        :type repo: str
        :param target: Target application ID to build an image for (must exist) (required)
        :type target: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the pull_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.pull_get_with_http_info(apikey, username, repo, target, **kwargs)  # noqa: E501

    @validate_arguments
    def pull_get_with_http_info(self, apikey : Annotated[StrictStr, Field(..., description="API key for user to authenticate ")], username : Annotated[StrictStr, Field(..., description="Name of user to authenticate")], repo : Annotated[StrictStr, Field(..., description="Docker repository to pull from")], target : Annotated[StrictStr, Field(..., description="Target application ID to build an image for (must exist)")], **kwargs) -> ApiResponse:  # noqa: E501
        """Pulls a Docker repository into a JARVICE application image. The JARVICE application image must already exist.  # noqa: E501

        Pulls a Docker repository into a JARVICE application image. The JARVICE application image must already exist. Additional Notes : 1. You will receive a notification once the pull starts and completes, either with or without error, per your account's notification preferences 2. repo uses the same syntax as the docker pull does 3. If pulling a private repository, you must log into the Docker registry in the JARVICE portal from the PushToComputeâ„¢ page first  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pull_get_with_http_info(apikey, username, repo, target, async_req=True)
        >>> result = thread.get()

        :param apikey: API key for user to authenticate  (required)
        :type apikey: str
        :param username: Name of user to authenticate (required)
        :type username: str
        :param repo: Docker repository to pull from (required)
        :type repo: str
        :param target: Target application ID to build an image for (must exist) (required)
        :type target: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'apikey',
            'username',
            'repo',
            'target'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pull_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('apikey') is not None:  # noqa: E501
            _query_params.append(('apikey', _params['apikey']))

        if _params.get('username') is not None:  # noqa: E501
            _query_params.append(('username', _params['username']))

        if _params.get('repo') is not None:  # noqa: E501
            _query_params.append(('repo', _params['repo']))

        if _params.get('target') is not None:  # noqa: E501
            _query_params.append(('target', _params['target']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '400': "str",
            '401': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/jarvice/pull', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def validate_post(self, var_json : Annotated[AppDef, Field(..., description="JSON payload containing an AppDef (application definition) to validate. Please see the Application Definition Guide for details on the format. A valid AppDef can be used to customize the user interface endpoints for an application, as well as descriptive metadata.")], **kwargs) -> object:  # noqa: E501
        """Validates an AppDef (application definition).  # noqa: E501

        Validates an AppDef (application definition). A valid AppDef can be used to customize the user interface endpoints for an application, as well as descriptive metadata. Response: A JSON payload with the boolean status in the valid key if successful, or a 400 error with a descriptive message on failure. Notes: Validation is done in a single pass and may not pinpoint the exact location of the error in every case  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validate_post(var_json, async_req=True)
        >>> result = thread.get()

        :param var_json: JSON payload containing an AppDef (application definition) to validate. Please see the Application Definition Guide for details on the format. A valid AppDef can be used to customize the user interface endpoints for an application, as well as descriptive metadata. (required)
        :type var_json: AppDef
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the validate_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.validate_post_with_http_info(var_json, **kwargs)  # noqa: E501

    @validate_arguments
    def validate_post_with_http_info(self, var_json : Annotated[AppDef, Field(..., description="JSON payload containing an AppDef (application definition) to validate. Please see the Application Definition Guide for details on the format. A valid AppDef can be used to customize the user interface endpoints for an application, as well as descriptive metadata.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Validates an AppDef (application definition).  # noqa: E501

        Validates an AppDef (application definition). A valid AppDef can be used to customize the user interface endpoints for an application, as well as descriptive metadata. Response: A JSON payload with the boolean status in the valid key if successful, or a 400 error with a descriptive message on failure. Notes: Validation is done in a single pass and may not pinpoint the exact location of the error in every case  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validate_post_with_http_info(var_json, async_req=True)
        >>> result = thread.get()

        :param var_json: JSON payload containing an AppDef (application definition) to validate. Please see the Application Definition Guide for details on the format. A valid AppDef can be used to customize the user interface endpoints for an application, as well as descriptive metadata. (required)
        :type var_json: AppDef
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'var_json'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['var_json'] is not None:
            _body_params = _params['var_json']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '400': "str",
        }

        return self.api_client.call_api(
            '/jarvice/validate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
