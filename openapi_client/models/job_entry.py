# coding: utf-8

"""
    Jarvice API

    The JARVICE API allows full control on running jobs as well as managing applications via PushToComputeâ„¢.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@nimbix.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from openapi_client.models.job_stats import JobStats
from openapi_client.models.submission import Submission

class JobEntry(BaseModel):
    """
    JobEntry
    """
    job_address: Optional[StrictStr] = None
    job_after: Optional[StrictStr] = None
    job_api_submission: Optional[Submission] = None
    job_app_discount: Optional[StrictInt] = None
    job_app_price: Optional[Union[StrictFloat, StrictInt]] = None
    job_application: Optional[StrictStr] = None
    job_billed: Optional[StrictBool] = None
    job_billing_code: Optional[StrictInt] = None
    job_command: Optional[StrictStr] = None
    job_dashboard_visible: Optional[StrictInt] = None
    job_end_time: Optional[StrictInt] = None
    job_exitcode: Optional[StrictInt] = None
    job_label: Optional[StrictStr] = None
    job_mc_discount: Optional[StrictInt] = None
    job_mc_name: Optional[StrictStr] = None
    job_mc_scale: Optional[StrictInt] = None
    job_name: Optional[StrictStr] = None
    job_nodes: Optional[StrictStr] = None
    job_number: Optional[StrictInt] = None
    job_owner_username: Optional[StrictStr] = None
    job_payer: Optional[StrictStr] = None
    job_price: Optional[Union[StrictFloat, StrictInt]] = None
    job_sched_id: Optional[StrictInt] = None
    job_sched_job_id: Optional[StrictStr] = None
    job_start_time: Optional[StrictInt] = None
    job_stats: Optional[JobStats] = None
    job_status: Optional[StrictStr] = None
    job_submit_time: Optional[StrictInt] = None
    job_substatus: Optional[StrictInt] = None
    job_substatus_text: Optional[StrictStr] = None
    job_walltime: Optional[StrictStr] = None
    __properties = ["job_address", "job_after", "job_api_submission", "job_app_discount", "job_app_price", "job_application", "job_billed", "job_billing_code", "job_command", "job_dashboard_visible", "job_end_time", "job_exitcode", "job_label", "job_mc_discount", "job_mc_name", "job_mc_scale", "job_name", "job_nodes", "job_number", "job_owner_username", "job_payer", "job_price", "job_sched_id", "job_sched_job_id", "job_start_time", "job_stats", "job_status", "job_submit_time", "job_substatus", "job_substatus_text", "job_walltime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobEntry:
        """Create an instance of JobEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of job_api_submission
        if self.job_api_submission:
            _dict['job_api_submission'] = self.job_api_submission.to_dict()
        # override the default output from pydantic by calling `to_dict()` of job_stats
        if self.job_stats:
            _dict['job_stats'] = self.job_stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobEntry:
        """Create an instance of JobEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobEntry.parse_obj(obj)

        _obj = JobEntry.parse_obj({
            "job_address": obj.get("job_address"),
            "job_after": obj.get("job_after"),
            "job_api_submission": Submission.from_dict(obj.get("job_api_submission")) if obj.get("job_api_submission") is not None else None,
            "job_app_discount": obj.get("job_app_discount"),
            "job_app_price": obj.get("job_app_price"),
            "job_application": obj.get("job_application"),
            "job_billed": obj.get("job_billed"),
            "job_billing_code": obj.get("job_billing_code"),
            "job_command": obj.get("job_command"),
            "job_dashboard_visible": obj.get("job_dashboard_visible"),
            "job_end_time": obj.get("job_end_time"),
            "job_exitcode": obj.get("job_exitcode"),
            "job_label": obj.get("job_label"),
            "job_mc_discount": obj.get("job_mc_discount"),
            "job_mc_name": obj.get("job_mc_name"),
            "job_mc_scale": obj.get("job_mc_scale"),
            "job_name": obj.get("job_name"),
            "job_nodes": obj.get("job_nodes"),
            "job_number": obj.get("job_number"),
            "job_owner_username": obj.get("job_owner_username"),
            "job_payer": obj.get("job_payer"),
            "job_price": obj.get("job_price"),
            "job_sched_id": obj.get("job_sched_id"),
            "job_sched_job_id": obj.get("job_sched_job_id"),
            "job_start_time": obj.get("job_start_time"),
            "job_stats": JobStats.from_dict(obj.get("job_stats")) if obj.get("job_stats") is not None else None,
            "job_status": obj.get("job_status"),
            "job_submit_time": obj.get("job_submit_time"),
            "job_substatus": obj.get("job_substatus"),
            "job_substatus_text": obj.get("job_substatus_text"),
            "job_walltime": obj.get("job_walltime")
        })
        return _obj

