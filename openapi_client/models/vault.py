# coding: utf-8

"""
    Jarvice API

    The JARVICE API allows full control on running jobs as well as managing applications via PushToComputeâ„¢.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@nimbix.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, conlist

class Vault(BaseModel):
    """
    Vault
    """
    bucket: Optional[StrictStr] = None
    confirm: Optional[StrictStr] = None
    domain: Optional[StrictStr] = None
    force: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    objects: Optional[conlist(StrictStr)] = None
    password: Optional[StrictStr] = None
    readonly: Optional[StrictBool] = None
    __properties = ["bucket", "confirm", "domain", "force", "name", "objects", "password", "readonly"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Vault:
        """Create an instance of Vault from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Vault:
        """Create an instance of Vault from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Vault.parse_obj(obj)

        _obj = Vault.parse_obj({
            "bucket": obj.get("bucket"),
            "confirm": obj.get("confirm"),
            "domain": obj.get("domain"),
            "force": obj.get("force"),
            "name": obj.get("name"),
            "objects": obj.get("objects"),
            "password": obj.get("password"),
            "readonly": obj.get("readonly")
        })
        return _obj

