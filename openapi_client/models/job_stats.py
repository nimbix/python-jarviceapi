# coding: utf-8

"""
    Jarvice API

    The JARVICE API allows full control on running jobs as well as managing applications via PushToComputeâ„¢.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@nimbix.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt

class JobStats(BaseModel):
    """
    JobStats
    """
    app_cost: Optional[Union[StrictFloat, StrictInt]] = None
    compute_cost: Optional[Union[StrictFloat, StrictInt]] = None
    compute_time: Optional[StrictInt] = None
    job_count: Optional[StrictInt] = None
    queue_time: Optional[StrictInt] = None
    wall_time: Optional[StrictInt] = None
    __properties = ["app_cost", "compute_cost", "compute_time", "job_count", "queue_time", "wall_time"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobStats:
        """Create an instance of JobStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobStats:
        """Create an instance of JobStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobStats.parse_obj(obj)

        _obj = JobStats.parse_obj({
            "app_cost": obj.get("app_cost"),
            "compute_cost": obj.get("compute_cost"),
            "compute_time": obj.get("compute_time"),
            "job_count": obj.get("job_count"),
            "queue_time": obj.get("queue_time"),
            "wall_time": obj.get("wall_time")
        })
        return _obj

