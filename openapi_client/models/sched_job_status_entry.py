# coding: utf-8

"""
    Jarvice API

    The JARVICE API allows full control on running jobs as well as managing applications via PushToComputeâ„¢.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@nimbix.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt, StrictStr

class SchedJobStatusEntry(BaseModel):
    """
    SchedJobStatusEntry
    """
    job_application: Optional[StrictStr] = None
    job_command: Optional[StrictStr] = None
    job_end_time: Optional[StrictInt] = None
    job_name: Optional[StrictStr] = None
    job_project: Optional[StrictStr] = None
    job_start_time: Optional[StrictInt] = None
    job_status: Optional[StrictStr] = None
    job_submit_time: Optional[StrictInt] = None
    job_substatus: Optional[StrictInt] = None
    job_walltime: Optional[StrictStr] = None
    __properties = ["job_application", "job_command", "job_end_time", "job_name", "job_project", "job_start_time", "job_status", "job_submit_time", "job_substatus", "job_walltime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SchedJobStatusEntry:
        """Create an instance of SchedJobStatusEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SchedJobStatusEntry:
        """Create an instance of SchedJobStatusEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SchedJobStatusEntry.parse_obj(obj)

        _obj = SchedJobStatusEntry.parse_obj({
            "job_application": obj.get("job_application"),
            "job_command": obj.get("job_command"),
            "job_end_time": obj.get("job_end_time"),
            "job_name": obj.get("job_name"),
            "job_project": obj.get("job_project"),
            "job_start_time": obj.get("job_start_time"),
            "job_status": obj.get("job_status"),
            "job_submit_time": obj.get("job_submit_time"),
            "job_substatus": obj.get("job_substatus"),
            "job_walltime": obj.get("job_walltime")
        })
        return _obj

