# coding: utf-8

"""
    Jarvice API

    The JARVICE API allows full control on running jobs as well as managing applications via PushToComputeâ„¢.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@nimbix.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import jarviceapi_client
from jarviceapi_client.models.machine_def import MachineDef  # noqa: E501
from jarviceapi_client.rest import ApiException

class TestMachineDef(unittest.TestCase):
    """MachineDef unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test MachineDef
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MachineDef`
        """
        model = jarviceapi_client.models.machine_def.MachineDef()  # noqa: E501
        if include_optional :
            return MachineDef(
                mc_arch = '', 
                mc_cores = 56, 
                mc_description = '', 
                mc_devices = '', 
                mc_gpus = 56, 
                mc_lesser = 56, 
                mc_max_concurrent = 56, 
                mc_name = '', 
                mc_price = 1.337, 
                mc_priority = 56, 
                mc_privs = [
                    ''
                    ], 
                mc_properties = '', 
                mc_ram = 56, 
                mc_scale_max = 56, 
                mc_scale_min = 56, 
                mc_scale_select = '', 
                mc_sched_id = 56, 
                mc_scratch = 56, 
                mc_slave_cores = 56, 
                mc_slave_gpus = 56, 
                mc_slave_properties = '', 
                mc_slave_ram = 56, 
                mc_slots = 56, 
                mc_swap = 56
            )
        else :
            return MachineDef(
        )
        """

    def testMachineDef(self):
        """Test MachineDef"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
